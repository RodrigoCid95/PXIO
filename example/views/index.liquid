<!doctype html>
<html lang="es" data-bs-theme="dark">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>{{ title }}</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH"
      crossorigin="anonymous">
    <style>
      body,
      html {
        height: 100%;
      }
      .full-height {
        height: 100%;
      }
    </style>
  </head>
  <body>
    <div class="container-fluid h-100">
      <div class="row h-100">
        <div class="col-md-8 offset-md-2 full-height d-flex flex-column">
          <div class="card border-primary flex-grow-1 h-100">
            <div class="card-header bg-primary text-white">
              Chat - {{ session.user.full_name }}
              <a class="btn btn-outline-light float-end" href="/logout">Cerrar sesión</a>
            </div>
            <div class="card-body overflow-auto d-block" id="chat-box"></div>
            <div class="card-footer">
              <form id="message-form">
                <div class="input-group">
                  <input
                    type="text"
                    class="form-control"
                    id="message_input"
                    placeholder="Escribe tu mensaje aquí">
                  <div class="input-group-append">
                    <button type="submit" class="btn btn-primary">Enviar</button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
    <script type="module">
      import {io} from '/socket.io/socket.io.esm.min.js'
      const socket = io()
      socket.on("connect", () => {
        document.getElementById('message-form').addEventListener('submit', e => {
          e.preventDefault()
          const message = e.target.elements.message_input.value.trim()
          if (message) {
            socket.emit('message', message)
            e.target.reset()
          }
        })
        const addItemToChatBox = (str) => {
          const pElement = document.createElement('p')
          const messageElement = document.createElement('strong')
          messageElement.innerHTML = str
          pElement.append(messageElement)
          const chatBoxElement = document.getElementById('chat-box')
          chatBoxElement.append(pElement)
          chatBoxElement.scrollTop = chatBoxElement.scrollHeight
        }
        socket.on('message', ({ user_name, message }) => addItemToChatBox(`${user_name}: ${message}`))
        socket.on('leave', ({ user_name, full_name }) => addItemToChatBox(`${user_name} (${full_name}) se ha abandonado.`))
        socket.on('join', ({ user_name, full_name }) => addItemToChatBox(`${user_name} (${full_name}) se ha unido.`))
        Object.defineProperty(window, 'socket', { value: socket, writable: false })
      })
    </script>
  </body>
</html>